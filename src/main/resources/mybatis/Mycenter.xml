<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
		"-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mycenter">

	<select id="obtainUserPicture" parameterType="String" resultType="java.util.HashMap">
	select ifnull(u_picture,'') as userPicture,ifnull(u_user_picture,'') as bgPicture from tb_user where user_id=#{value}
	
	</select>

	<!-- 获得旅行风格 -->
	<select id="obtainTravelStyle" parameterType="String" resultType="java.util.HashMap">
		SELECT 
		ifnull(ts.ts_bg_picture,'') as bgPicture,  ts.travel_style_id as travelStyleId,ts.ts_grey_picture AS grayPicture,ts.ts_white_picture as whitePicture,ts.ts_black_picture as bluePicture
        from 
          tb_user_travel_style as uts, tb_travel_style as ts  
        WHERE 
          uts.user_id=#{value}  and uts.travel_style_id=ts.travel_style_id
	</select>

	<!-- 获得游记数量  -->
	<select id="obtainMyTravelNotesNum" parameterType="String" resultType="Long" >
       SELECT 
        count(tn.travel_notes_id) 
      from 
         tb_travel_notes as tn  
      WHERE 
         tn.user_id=#{value} and tn_isno_delete=0

	</select>


	<!-- 去过国家数量  -->
	<select id="obtainMyCountryNum" parameterType="String" resultType="Long">
	  SELECT 
        count(DISTINCT tn.country_id) 
      from 
         tb_travel_notes as tn  
      WHERE 
         tn.user_id=#{value} and tn_isno_delete=0
	</select>


	<!-- 我的游记列表  -->
	<select id="obtainMyNotesList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<!--SELECT -->
		<!--tn.travel_notes_id as travelNotesId,tn.tn_comments_num as commentsNum, tn.tn_praise_num as praiseNum,  -->
		<!--tn.tn_newtime as  notesDate,tn.tn_title as title,tn.tn_isno_complete as isnoComplete,tn.can_publish as canPublish,is_pushed as isPushed,-->
		<!--(select p.p_picture from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1)-->
		<!--as notesPicture,(select p.p_width from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1) as p_width,-->
		<!--(select p.p_height from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1) as p_height-->
		<!--from -->
		<!--tb_travel_notes as tn -->
		<!--WHERE -->
		<!--tn.user_id=#{userId} and  tn.tn_isno_delete=0-->
		<!--<if test="notMe!=null">-->
		<!--and tn.can_publish = 0-->
		<!--</if>-->
		<!--order by -->
		<!--tn.tn_isno_complete asc,-->
		<!--tn.can_publish desc,-->
		<!--tn.tn_newtime desc-->
		<!--limit ${startIndex},${size}-->
		SELECT
		tn.travel_notes_id AS travelNotesId,
		tn.tn_comments_num AS commentsNum,
		tn.tn_praise_num AS praiseNum,
		tn.tn_newtime AS notesDate,
		tn.tn_title AS title,
		tn.tn_isno_complete AS isnoComplete,
		tn.can_publish AS canPublish,
		tn.tn_views_num,
		is_pushed AS isPushed,
		p.p_picture AS notesPicture,p.p_width AS p_width,p.p_height AS p_height

		FROM
		tb_travel_notes AS tn INNER JOIN tb_picture as p on tn.travel_notes_id = p.travel_notes_id
		WHERE
		tn.user_id = #{userId} and  tn.tn_isno_delete = 0 AND p.p_isno_cover = 1 and p.p_isno_delete = 0

		ORDER BY
		-- tn.tn_isno_complete ASC,
		tn.can_publish DESC,
		tn.tn_newtime DESC
		limit
		${startIndex},${size}
	</select>

	<!-- 我的游记列表  -->
	<select id="obtainMyNotesWithAnotherList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<!--SELECT -->
		<!--tn.travel_notes_id as travelNotesId,tn.tn_comments_num as commentsNum, tn.tn_praise_num as praiseNum,  -->
		<!--tn.tn_newtime as  notesDate,tn.tn_title as title,tn.tn_isno_complete as isnoComplete,tn.can_publish as canPublish,is_pushed as isPushed,-->
		<!--(select p.p_picture from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1)-->
		<!--as notesPicture,(select p.p_width from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1) as p_width,-->
		<!--(select p.p_height from tb_picture p where tn.travel_notes_id=p.travel_notes_id and  p.p_isno_cover=1 and p.p_isno_delete = 0 limit 1) as p_height-->
		<!--from -->
		<!--tb_travel_notes as tn -->
		<!--WHERE -->
		<!--tn.user_id=#{userId} and  tn.tn_isno_delete=0-->
		<!--<if test="notMe!=null">-->
		<!--and tn.can_publish = 0-->
		<!--</if>-->
		<!--order by -->
		<!--tn.tn_isno_complete asc,-->
		<!--tn.can_publish desc,-->
		<!--tn.tn_newtime desc-->
		<!--limit ${startIndex},${size}-->
		SELECT
		tn.travel_notes_id AS travelNotesId,
		tn.tn_comments_num AS commentsNum,
		tn.tn_praise_num AS praiseNum,
		tn.tn_newtime AS notesDate,
		tn.tn_title AS title,
		tn.tn_isno_complete AS isnoComplete,
		tn.can_publish AS canPublish,
		tn.tn_views_num,
		is_pushed AS isPushed,
		p.p_picture AS notesPicture,p.p_width AS p_width,p.p_height AS p_height

		FROM
		tb_travel_notes AS tn INNER JOIN tb_picture as p on tn.travel_notes_id = p.travel_notes_id
		WHERE
		tn.user_id = #{userId} and  tn.tn_isno_delete = 0 AND p.p_isno_cover = 1 and p.p_isno_delete = 0
		and tn.can_publish!=1
		ORDER BY
		-- tn.tn_isno_complete ASC,
		-- tn.can_publish DESC,
		tn.tn_newtime DESC
		limit
		${startIndex},${size}
	</select>

	<!-- 获取语言等个人信息  -->
	<select id="obtainlanguageCountryBirthday" parameterType="String" resultType="java.util.HashMap">
		SELECT 
		   u.u_nickname as nickName, u.area_name as areaName, u.u_birthday as birthday,
		   u_language as language,   c.c_english as englishName,u.u_picture as picture,
		  c.country_id as countryId,  c.c_simple as simpleName,	 c.c_traditional as	traditionalName 
         from 
           tb_user as u 
            left join tb_country as c  ON c.country_id =u.country_id 
         WHERE 
           user_id=#{value} 
	</select>

	<!-- 删除旅行风格-->
	<delete id="deletetravelStyleId" parameterType="String" >
		DELETE FROM tb_user_travel_style  
		WHERE 
           user_id=#{value} 
	</delete>

	<!-- 插入旅行风格-->
	<insert id="insertTravelStyleId" parameterType="java.util.HashMap" >
		insert INTO 
		   tb_user_travel_style  
		SET  
           user_id=#{userId}, travel_style_id=#{travelStyleId}
	</insert>


	<!-- 保存个人信息-->
	<update id="saveMyInfo" parameterType="java.util.HashMap" >
		update
		tb_user
		set
		delete_flag=0
		<if test="picture!=null">
			, u_picture=#{picture}
		</if>
		<if test="nickName!=null">
			,u_nickname=#{nickName}
		</if>
		<if test="birthday!=null">
			,u_birthday=#{birthday}
		</if>
		<if test="language!=null">
			,u_language=#{language}
		</if>
		<if test="areaName!=null">
			,area_name=#{areaName}
		</if>
		WHERE
		user_id=#{userId}
	</update>
	<update id="updateuserUpicture" parameterType="java.util.HashMap">
	 update tb_user set u_user_picture=(select ts_bg_picture from tb_travel_style where travel_style_id=#{travelStyleId}) 
	 where  user_id=#{userId}
	</update>

	<!-- 获取好友列表-->
	<select id="obtainMyFriends" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
		DISTINCT u.u_picture as picture, u.user_id as userId, u.u_nickname as nickName, u.u_last_time as lastTime, f.friends_id
		from
		tb_friends as f
		left join tb_user as u ON u.user_id =f.f_passive_people_id
		WHERE
		f.f_initiative_people_id=#{userId} and f.f_isno_delete=0 and u.user_id is not null
		<if test="content!=null">
			and u.u_nickname like '%${content}%'
		</if>
		order by
		f.friends_id desc
		limit
		${startIndex},${size}
	</select>

	<!-- 获取好友列表数量-->
	<select id="obtainMyFriendsCount" parameterType="java.util.HashMap" resultType="Long">
		 SELECT 
		      IFNULL(count(*),0)
         from 
           tb_friends as f
            left join tb_user as u ON u.user_id =f.f_passive_people_id
         WHERE 
           f.f_initiative_people_id=#{userId} and f.f_isno_delete=0 and u.user_id is not null
	</select>

	<select id="obtainRecentListALL" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select nl.notification_list_id as notificationId
			from tb_notification_list as nl
					LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
					LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
					WHERE nl.user_id in (#{userId},-1) and nl.type in (10,11,12,13,14) and nl.passive_id != #{userId}
					ORDER BY time DESC
	</select>
	<update id="updateRefreshTime" parameterType="java.util.HashMap">
		UPDATE tb_notification_list SET refresh_time=#{refresh_time} WHERE notification_list_id=#{notificationId}
	</update>
	<!-- 获取@Recent消息 -->
	<select id="obtanRecentList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		(select nl.notification_list_id as notificationId,nl.type as type,nl.time as time ,nl.content as content,nl.read_status as readStatus
		,nl.passive_id  as userId,u.u_nickname as username,u.u_picture as userPicture,p.travel_notes_id as travelNotesId
		,p.picture_id as pictureId,nl.picture as picture,p_width,p_height,p_isno_delete,(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) as address ,p.p_description as description
		from tb_notification_list as nl
		LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
		LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE nl.user_id in (#{userId},-1) and nl.type in (10,12,13,14) and nl.passive_id != #{userId} and ifnull(tn.tn_isno_delete,0) = 0 ORDER BY time DESC
		) union all (
		select nl.notification_list_id as notificationId,nl.type as type,nl.time as time ,nl.content as content,nl.read_status as readStatus
		,nl.passive_id  as userId,u.u_nickname as username,u.u_picture as userPicture,p.travel_notes_id as travelNotesId
		,p.picture_id as pictureId,nl.picture as picture,p_width,p_height,tn.tn_isno_delete as p_isno_delete,(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) as address ,p.p_description as description
		from tb_notification_list as nl
		LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
		LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE nl.user_id in (#{userId},-1) and nl.type in (11) and nl.passive_id != #{userId} and ifnull(tn.tn_isno_delete,0) = 0 ORDER BY time DESC
		)
		ORDER BY time DESC
		limit ${startIndex},${size}
	</select>
	<!-- 获取@Recent消息 -->
	<select id="obtanActivityRecentList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		(select nl.notification_list_id as notificationId,nl.type as type,nl.time as time ,nl.content as content,nl.read_status as readStatus
		,nl.passive_id  as userId,u.u_nickname as username,u.u_picture as userPicture,p.travel_notes_id as travelNotesId
		,p.picture_id as pictureId,nl.picture as picture,p_width,p_height,p_isno_delete,(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) as address ,p.p_description as description
		from tb_notification_list as nl
		LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
		LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE nl.user_id in (#{userId},-1) and nl.type in (10,12,13,14) and nl.passive_id != #{userId} and ifnull(tn.tn_isno_delete,0) = 0 ORDER BY time DESC
		) UNION  all(
		select nl.notification_list_id as notificationId,nl.type as type,nl.time as time ,nl.content as content,nl.read_status as readStatus
		,nl.passive_id  as userId,u.u_nickname as username,u.u_picture as userPicture,p.travel_notes_id as travelNotesId
		,p.picture_id as pictureId,nl.picture as picture,p_width,p_height,tn.tn_isno_delete as p_isno_delete,(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) as address ,p.p_description as description
		from tb_notification_list as nl
		LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
		LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE nl.user_id in (#{userId},-1) and nl.type in (11) and nl.passive_id != #{userId} and ifnull(tn.tn_isno_delete,0) = 0  ORDER BY time DESC
		)
		union all
		(
		select nl.notification_list_id as notificationId,nl.type as type,nl.time as time ,nl.content as content,nl.read_status as readStatus
		,nl.user_id  as userId,u.u_nickname as username,u.u_picture as userPicture,
		p.ap_id as travelNotesId
		,p.ap_id as pictureId,nl.picture as picture,
		p.ap_id as p_width,
		p.ap_id as p_height,
		p.ap_id as p_isno_delete,
		p.address as address ,p.content as description
		from tb_notification_list as nl
		LEFT JOIN tb_activity_picture as p ON p.ap_id =nl.picture_id
		LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
		WHERE nl.user_id = #{userId} and nl.type =18  and nl.passive_id is not null ORDER BY time DESC
		)
		ORDER BY time DESC
		limit ${startIndex},${size}
	</select>

	<sql id="legalUser">
		select user_id from tb_user
	</sql>


	<select id="obtainYouListAll" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select nl.notification_list_id as notificationId
			from tb_notification_list as nl
					LEFT JOIN tb_picture as p ON p.picture_id =nl.picture_id
					LEFT JOIN tb_user as u ON u.user_id=nl.passive_id
					WHERE nl.user_id in (#{userId},-1) and nl.type in (0,1,2,3,4,13,14,18,20)
					ORDER BY time DESC
	</select>
	<select id="obtanYouList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.passive_id = #{userId} and nl.user_id = #{userId}
		AND nl.type = 14
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)
		UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type IN (0, 1, 2, 3, 4, 20)
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)
		UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type = 13
		AND ifnull(tn.tn_isno_delete, 0) = 0
		AND nl.passive_id = #{userId}
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type =18
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id is null
		ORDER BY
		time DESC
		)
		ORDER BY notificationId DESC
		limit ${startIndex},${size}
	</select>
	<select id="obtanActivityYouList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.passive_id = #{userId} and nl.user_id = #{userId}
		AND nl.type = 14
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)
		UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type IN (0, 1, 2, 3, 4, 20)
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)
		UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.ap_id AS travelNotesId,
		p.ap_id AS pictureId,
		nl.picture AS picture,
		p.ap_id AS p_width,
		p.ap_id AS p_height,
		p.ap_id AS p_isno_delete,
		p.address  AS address,
		p.content AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_activity_picture AS p ON p.ap_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type IN (25,30,31)
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)
		UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type = 13
		AND ifnull(tn.tn_isno_delete, 0) = 0
		AND nl.passive_id = #{userId}
		and nl.passive_id in (<include refid="legalUser"/>)
		ORDER BY
		time DESC
		)	UNION ALL
		(
		SELECT
		nl.notification_list_id AS notificationId,
		nl.type AS type,
		nl.time AS time,
		nl.content AS content,
		nl.read_status AS readStatus,
		nl.passive_id AS userId,
		u.u_nickname AS username,
		u.u_picture AS userPicture,
		p.travel_notes_id AS travelNotesId,
		p.picture_id AS pictureId,
		nl.picture AS picture,
		p_width,
		p_height,
		p_isno_delete,
		(
		SELECT
		<if test="language==0">
			c.c_english
		</if>
		<if test="language==1">
			c.c_simple
		</if>
		<if test="language==2">
			c.c_traditional
		</if>
		FROM
		tb_country AS c
		WHERE
		c.country_id = tn.country_id
		) AS address,
		p.p_description AS description
		FROM
		tb_notification_list AS nl
		LEFT JOIN tb_picture AS p ON p.picture_id = nl.picture_id
		LEFT JOIN tb_user AS u ON u.user_id = nl.passive_id
		LEFT JOIN tb_travel_notes AS tn ON p.travel_notes_id = tn.travel_notes_id
		WHERE
		nl.user_id IN (#{userId} ,- 1)
		AND nl.type =18
		AND ifnull(tn.tn_isno_delete, 0) = 0
		and nl.passive_id is null
		ORDER BY
		time DESC
		)
		ORDER BY notificationId DESC
		limit ${startIndex},${size}
	</select>

	<!--                         获取@You            and DATE_SUB(CURDATE(),INTERVAL 1 MONTH) &lt;= DATE(time)                   -->
	<!-- @You中带照片的-->
	<select id="obtainType1List" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select tcp.*,p.p_address as address,p.p_description as description,p.picture_id as pictureId,p.travel_notes_id as travelNotesId
		FROM (
		SELECT
		nl.picture as picture,nl.content AS content,nl.time as time,nl.type as type
		,u.u_picture as userPicture ,u.u_nickname as username
		from
		tb_notification_list as nl
		left join tb_user as u ON u.user_id =nl.passive_id
		WHERE
		nl.user_id=#{userId} and nl.type in (0,1,2)
		order by
		time desc
		limit ${startIndex},${size}
		) as tcp,tb_picture as p where p.p_picture=tcp.picture
	</select>

	<select id="obtainType2List" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT u.user_id as userId,u.u_picture as userPicture,u.u_nickname as username,nl.type as type,nl.content as content,nl.time as time from tb_notification_list as nl
		LEFT JOIN tb_user as u on u.user_id=nl.passive_id
		where nl.user_id=#{userId} and nl.type in (3,4)
		ORDER BY
		time DESC
		limit ${startIndex},${size}
	</select>

	<!-- 获取通知列表-->
	<select id="obtainNotificationList" parameterType="java.util.HashMap" resultType="java.util.HashMap">

		 SELECT 
		    nl.picture as picture,nl.content AS content,nl.time as time,nl.type as type
               ,u.u_picture as userPicture ,u.u_nickname as username
         from 
            tb_notification_list as nl 
            left join tb_user as u ON u.user_id =nl.passive_id
         WHERE 
           nl.user_id=#{userId}
        order by
		    time desc
		limit 
		   ${startIndex},${size}
	</select>

	<!-- 获取通知列表数量-->
	<select id="obtainNotificationListCount" parameterType="java.util.HashMap" resultType="Long">
		 SELECT 
		    count(*)
         from 
            tb_notification_list
         WHERE 
           user_id=#{userId}
      
	</select>

	<!-- 获取推荐好友列表 -->
	<select id="obtainRecommendFriends" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
		DISTINCT  u.user_id as userId,u.u_picture as picture,u.u_nickname as nickName ,u.u_last_time as lastTime
		,u.u_type as type,u.u_beinvitation_code as beinvitationCode,f.status,f.recommend_friends_id
		from
		tb_recommend_friends as f
		left join tb_user as u ON u.user_id =f.passive_people_id
		WHERE
		f.user_id=#{userId} and u.user_id!=#{userId}
		<if test="type!=null">
			and f.rf_type=#{type}
		</if>
		and f.delete_flag=0 and u.user_id is not null and f.isno_member=1
		order by
		f.status  desc,
		f.recommend_friends_id desc
		limit
		${startIndex},${size}
	</select>

	<!-- 获取推荐好友数量 -->
	<select id="obtainRecommendFriendsCount" parameterType="java.util.HashMap" resultType="Long">
	    SELECT 
		     Count(DISTINCT(u.user_id))
         from 
           tb_recommend_friends as f
            left join tb_user as u ON u.user_id =f.passive_people_id
         WHERE 
           f.user_id=#{userId} and f.delete_flag=0 and u.user_id is not null and f.isno_member=1 and u.user_id!=#{userId}
	</select>

	<select id="obtainRecommendFriendsYoloboo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	    SELECT 
		      u.u_picture as picture, u.user_id as userId,u.u_nickname as nickName ,u.u_last_time as lastTime,u.u_last_time as lastTime  
		      ,u.u_type as type,u.u_beinvitation_code as beinvitationCode
         from 
            tb_user as u
         WHERE 
           u.u_type=2 or  u.u_invitation_code=(select u_beinvitation_code from tb_user where user_id=#{userId})
          order by type desc 
          limit ${startIndex},${size}
	</select>

	<select id="judgeRecommendFriendsRecommend" parameterType="java.util.HashMap" resultType="Integer">
	    SELECT 
		     COUNT(*)
         from 
             tb_recommend_friends as f
         WHERE 
          f.user_id=#{userId}
          AND  f.passive_people_id=#{RecommendId} 
          
	</select>
	<!-- 添加到好友推荐表 -->
	<insert id="flushFriends" parameterType="java.util.HashMap">
      insert into tb_recommend_friends (user_id,third_id,passive_people_id,rf_type,isno_member,add_time) VALUES
      	(#{userId},#{third_id},#{recommendId},#{type},1,#{nowtime})
    </insert>
	<!-- 判断该用户是否为注册用户且不为我的好友-->
	<select id="judgeFriendsisExsit1" parameterType="java.util.HashMap" resultType="Integer">
		SELECT count(1) from tb_friends as f where f.f_initiative_people_id=#{userId} and f.f_passive_people_id=#{recommendId}
	</select>

	<select id="judgeRecommendFriendsRecommendId" parameterType="java.util.HashMap" resultType="String">
	     SELECT 
		      DISTINCT u.user_id as userId 
         from 
            tb_user as u
         WHERE 
           u.u_invitation_code=(select u_beinvitation_code from tb_user where user_id=#{userId})
	</select>

	<!-- 删除推荐好友-->
	<delete id="deleteRecommendFriendsRecommend" parameterType="java.util.HashMap" >
	   DELETE FROM tb_recommend_friends  
		WHERE 
          user_id=#{userId}
          AND   
          passive_people_id=#{RecommendId}
	</delete>

	<select id="obtainUserNumByThird" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT count(user_id) as userNum FROM tb_user WHERE
		<if test="type==2">
			u_phone=#{third_id}
		</if>
		<if test="type==1">
			u_facebook_id=#{third_id}
		</if>
		<if test="type==0">
			u_sina_id=#{third_id}
		</if>
	</select>
	<select id="obtainUserIdByThird" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT user_id as userId FROM tb_user WHERE
		<if test="type==2">
			u_phone=#{third_id}
		</if>
		<if test="type==1">
			u_facebook_id=#{third_id}
		</if>
		<if test="type==0">
			u_sina_id=#{third_id}
		</if>
	</select>

	<update id="updateReadStatus" parameterType="java.util.HashMap">
		UPDATE  tb_notification_list SET read_status=1 WHERE user_id=#{userId}
		-- 		and type in (5,6,7)
		<if test="notifiType==0">
			AND type in(5,6,7)
		</if>
		<if test="notifiType==1">
			AND type IN (0,1,2,3,4)
		</if>
	</update>


	<select id="isRecentNewNotify" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT count(1) as recentNum FROM tb_notification_list WHERE user_id=#{userId} and read_status=0 and  type in(5,6,7)
	</select>

	<select id="isRecentNewNotify1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT count(1) as recentNum FROM tb_notification_list WHERE user_id=#{userId} and read_status=0 and  type in(10,11,12,13,14) AND refresh_time is NULL
	</select>

	<select id="isYouNewNotify" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT count(1) as youNum FROM tb_notification_list WHERE user_id=#{userId} and read_status=0 and type in (0,1,2,3,4)
	</select>

	<select id="isYouNewNotify1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT count(1) as youNum FROM tb_notification_list WHERE user_id=#{userId} and read_status=0 and type in (0,1,2,3,4,13,14) AND refresh_time is NULL
	</select>

	<select id="obtainUserIdBy" parameterType="java.util.HashMap" resultType="java.lang.String">
		SELECT user_id as userId FROM tb_user WHERE
		<if test="type==2">
			u_phone=#{third_id}
		</if>
		<if test="type==1">
			u_facebook_id=#{third_id}
		</if>
		<if test="type==0">
			u_sina_id=#{third_id}
		</if>
	</select>

	<update id="updateCommentReadStatus" parameterType="java.util.HashMap">
		UPDATE tb_notification_list SET read_status=1 WHERE notification_list_id=#{notificationId}
	</update>
	<insert id="reportUser" parameterType="java.util.HashMap">
		INSERT INTO tb_report_content
		SET ts_report_type_id=#{reportType},ts_user_id=#{reportId},ts_travel_note_id=#{reportNotesId},ts_date=#{time}
	</insert>


	<select id="selectReportType" parameterType="java.lang.String" resultType="java.util.HashMap">
		select ts_id,
		<if test="value==0">
			ts_name_en as ts_name
		</if>
		<if test="value==1">
			ts_name_cn as ts_name
		</if>
		<if test="value==2">
			ts_name_tw as ts_name
		</if>
		FROM tb_report_type
	</select>
</mapper>
