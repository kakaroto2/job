<?xml version="1.0" encoding="UTF-8"?>
<!-- Repository and Service layers -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


	<context:component-scan base-package="com.yoloboo.service,com.yoloboo.dao" />

	<context:property-placeholder
		location="classpath:databases/product-data-access.properties"
		system-properties-mode="OVERRIDE" />

	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
		<property name="driverClassName" value="${jdbc.driverClassName}"/> <property 
		name="url" value="${jdbc.url}"/> <property name="username" value="${jdbc.username}"/> 
		<property name="password" value="${jdbc.password}"/> <property name="maxActive" 
		value="10"/> <property name="minIdle" value="1"/> <property name="maxIdle" 
		value="10"/> <property name="initialSize" value="1"/> 设置在自动回收超时连接的时候打印连接的超时错误 
		<property name="logAbandoned" value="true"/> 设置自动回收超时连接 <property name="removeAbandoned" 
		value="true"/> 超时时间(以秒数为单位) <property name="removeAbandonedTimeout" value="10"/> 
		超时等待时间以毫秒为单位 <property name="maxWait" value="100"/> </bean> -->

	<!--资源文件绑定设置 -->
	<bean id="yolobooMessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:i18n/messages"/>
		<property name="cacheSeconds" value="0"/>
	</bean>

	<bean id="dataSource" name="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.cfg.xml"></property>
		<property name="mapperLocations" value="classpath*:mybatis*/*.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 定义mybatis操作模板类似hibernateTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!--   如果在controller层加事务 proxy-target-class="true"-->

	<bean id="QuartzAction" class="com.yoloboo.controller.QuartzController"></bean>

	<bean id="pushMsgJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="QuartzAction" />
		<property name="targetMethod" value="pushMsg" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="pushMsgTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="pushMsgJobDetail" />
		<property name="cronExpression" value="0 0/2 * * * ?" />
	</bean>

	<bean id="recommendFriendsJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="QuartzAction" />
		<property name="targetMethod" value="recommendFriends" />
		<property name="concurrent" value="false" />
	</bean>


	<bean id="recommendFriendsTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="recommendFriendsJobDetail" />
		<property name="cronExpression" value="0 0 3 * * ?" />
	</bean>


	<!--<bean id="pushActivityMsgTrigger"-->
		  <!--class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="pushActivityMsgJobDetail" />-->
		<!--<property name="cronExpression" value="0 0/5 * * * ?" />-->
	<!--</bean>-->


	<!--<bean id="pushActivityMsgJobDetail"-->
		  <!--class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="QuartzAction" />-->
		<!--<property name="targetMethod" value="pushActivityMsg" />-->
		<!--<property name="concurrent" value="false" />-->
	<!--</bean>-->

	<bean id="updateNotificationStatusTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateNotificationStatusTriggerJobDetail" />
		<property name="cronExpression" value="0 0/5 * * * ?" />
	</bean>


	<bean id="updateNotificationStatusTriggerJobDetail"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="QuartzAction" />
		<property name="targetMethod" value="updateNotificationStatus" />
		<property name="concurrent" value="false" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="pushMsgTrigger" />
				<ref bean="recommendFriendsTrigger" />
				<!--<ref bean="pushActivityMsgTrigger" />-->
				<ref bean="updateNotificationStatusTrigger" />
			</list>
		</property>
	</bean>

</beans>